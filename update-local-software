#!/usr/local/bin/scsh \
-o sorting -o srfi-1 -o srfi-2 -o srfi-9 -o srfi-13 -o srfi-14 -o srfi-16 -o srfi-37 -e main -s
!#

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; This script updates local copies of useful software that I keep
;;; installed on my laptop.  It relies on access to a script called
;;; `list-makefile-targets`, which has the following definition:
;;;
;;;     make -pn | perl -F: -ane 'print "$F[0]\n" if /^\w+\s*:/' \
;;;              | sort | uniq
;;;
;;; It would not be difficult to write this as a function within scsh,
;;; but I have it as an external script because I also use it for
;;; other purposes.
;;; 
;;; This script also assumes access to Git and GNU Make.
;;;
;;; Run the program with the -h or --help option to see all of the
;;; available command-line flags and arguments.
;;;
;;; Useful links for understanding this script:
;;;
;;;     * http://www.schemers.org/Documents/Standards/R5RS/HTML/
;;;     * http://scsh.net/docu/html/man.html
;;;     * http://scsh.net/docu/docu.html
;;;     * http://srfi.schemers.org/
;;;     * http://mazack.org/unix/errno.php
;;;     * http://ericjmritz.name/2015/07/03/useful-srfis-for-scheme-programming/
;;;     * http://ericjmritz.name/2015/07/05/writing-scheme-functions-with-optional-arguments/
;;;
;;; Author:         Eric James Michael Ritz <ejmr@plutono.com>
;;; Project Site:   https://github.com/ejmr/update-local-software
;;; License:        Public Domain
;;;
;;; Finally, this program uses Semantic Versioning:
;;;     http://semver.org/
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define version "0.3.0")

(define (main arguments)
  (cond ((running-as-root?)
         (error "Cannot run as root")
         ;; Unix errno code for: "Operation not permitted"
         (exit 1)))
  (args-fold command-line-arguments
             flags
             handle-unrecognized-option
             no-op)
  (for-each process software-to-process)
  (exit 0))

;;; This function "processes" the given :software record.  In this
;;; context "processing" means to run the `update`, `build`, and
;;; `install` functions for that software, along with displaying some
;;; output about the current software being processed.
;;;
;;; This function will obey the `--update-only` command-line flag if
;;; it was given to the script.  If the script was given the `-n` or
;;; `--dry-run` flag then this function only displays output about
;;; what it would do, but without performing any actions.
;;;
;;; It returns no value.
(define (process software)
  (let ((directory (get-directory software))
        (name (get-name software)))
    (display (string-append "\nProcessing " directory "\n\n"))
    (cond ((or (member "-n" (command-line))
               (member "--dry-run" (command-line)))
           (display (string-append "Would update " name "\n"))
           (if (not (member "--update-only" (command-line)))
               (begin
                 (display (string-append "Would build " name "\n"))
                 (display (string-append "Would install " name "\n")))))
          (else
           (update software)
           (if (not (member "--update-only" (command-line)))
               (begin
                 (build software)
                 (install software)))))))

;;; The string we display when using the -h/--help flag.  This is an
;;; example of here-strings in scsh.  More information available here:
;;;
;;;     http://scsh.net/docu/html/man-Z-H-2.html#node_sec_1.6.4
;;;
(define help-string #<<HELP
Usage: update-local-software [OPTIONS]

-h, --help
    Shows this information.
    
-v, --version
    Shows the current version then exits.

-n, --dry-run
    Shows actions the script would perform but does nothing.

-l, --list
    Lists the name of all software the script updates, builds,
    installs, etc., and then exits.  All of the names are
    acceptable values to the -s/--software flag.
    
--update-only
    Updates the repositories for all software but does not build
    or install anything.

-s <name>, --software=<name>
    Updates, builds, and installs the software with the given
    name and then exits.

HELP
)

;;; A simple function for convenience which accepts any number of
;;; arguments but does nothing.  All calls return `#t`.
(define no-op (lambda (value . rest) #t))

;;; A list of acceptable command-line flags.  Run the script with the
;;; -h/--help flag for information about these flags.
(define flags
  (list (option '("update-only") #f #f no-op)
        (option '(#\n "dry-run") #f #f no-op)
        (option '(#\l "list") #f #f
                (lambda (option name value . rest)
                  (for-each
                   (lambda (name)
                     (display name)
                     (display "\n"))
                   (list-sort string-ci< (map get-name software-to-process)))
                  (exit 0)))
        (option '(#\s "software") #t #f
                (lambda (option name value . rest)
                  (let ((match (find-software value)))
                    (cond ((not (null-list? match))
                           (let ((software (car match)))
                             (process software)
                             (exit 0)))
                          (else
                           (error "No known software" value)
                           ;; Unix errno code for: "Invalid argument"
                           (exit 22))))))
        (option '(#\h "help") #f #f
                (lambda (option name value . rest)
                  (display help-string)
                  (exit 0)))
        (option '(#\v "version") #f #f
                (lambda (option name value . rest)
                  (display version)
                  (exit 0)))))

;;; The program calls this function for any unknown command-line
;;; options it receives, i.e. anything not defined in `flags`.
(define (handle-unrecognized-option option name value . rest)
  (error "Unrecognized option" name)
  ;; Unix errno code for: "Invalid argument"
  (exit 22))

;;; Represents a single program to update.  Each instance has the
;;; following properties:
;;;
;;; REQUIRED
;;;
;;; * name: The name of the software as a string.
;;;
;;; * directory: The absolute path to the software as a string.
;;;
;;; * install-prefix: A string which is the path prefix to use when
;;; installing the program, e.g. the value to give to `./configure
;;; --prefix=...`
;;;
;;; OPTIONAL
;;;
;;; * update-function: This must be a function which accepts one
;;; argument, the software record itself.  The function should run any
;;; commands necessary to fetch all updates for that software,
;;; e.g. running `git fetch` on a remote other than `origin`.
;;;
;;; * build-function: This must be a function which accepts one
;;; argument, which will be the software record itself.  The function
;;; should run all commands necessary to build the software.  The
;;; function does NOT need to update the software, e.g. fetch updates
;;; from a Git repository.
;;;
;;; * install-function: This must be a function that accepts the
;;; software record as its one argument.  The function should run any
;;; commands necessary to install the software, under the assumption
;;; that the software has already been updated and built.
;;;
;;; IMPORTANT NOTES
;;;
;;; Any properties that represent a file-path MUST NOT end with a
;;; slash, because many functions append one when working with
;;; directories.
;;;
;;; All of the optional `*-function` properties will be run in the
;;; context of
;;;
;;;     (with-cwd (get-directory software) ...)
;;;
;;; so it is not necessary to set the current working directory in
;;; those functions unless it needs to be different from the value of
;;; the software's `directory` property.
(define-record-type :software
  (new-software name directory install-prefix)
  software?
  (name             get-name)
  (directory        get-directory)
  (install-prefix   get-install-prefix)
  (update-function  get-update-function  set-update-function!)
  (build-function   get-build-function   set-build-function!)
  (install-function get-install-function set-install-function!))

;;; This function searches from `software-to-process` to find an
;;; instance of a :software record for the given software name,
;;; performing case-insensitive comparisons.  The function will return
;;; a list containing the matching software or nothing.
(define (find-software name)
  (filter (lambda (software)
            (string-ci= name (get-name software)))))

;;; This is a utility for creating a :software record representing a
;;; program which I only want to update.  I.e. it has no-op's for its
;;; `build` and `install` functions.
(define (new-software-to-update-only name directory)
  (let ((software (new-software name directory "")))
    (set-build-function!   software no-op)
    (set-install-function! software no-op)
    software))

;;; A list of the software I want this script to process.
(define software-to-process
  (append

   ;; This is software which uses the default behavior of `update`,
   ;; `build`, and `install`.
   (map (lambda (name)
          (new-software name
                        (string-append "/home/eric/Software/" name)
                        "/usr/local"))
        (list "Emacs"
              "Fish"
              "LuaJIT"
              "scsh"
              "Solid"))

   ;; Add software to update but which requires special steps that
   ;; differ from the default behavior of the `update`, `build`, and
   ;; `install` functions.
   (let ((php (new-software "PHP" "/home/eric/Software/PHP" "/opt/php"))
         (tup (new-software "Tup" "/home/eric/Software/Tup" "/home/eric/Software/Tup"))
         (rock (new-software "rock" "/home/eric/Software/rock" ""))
         (git (new-software "Git" "/home/eric/Software/Git" "/usr/local"))
         (tig (new-software "Tig" "/home/eric/Software/Tig" "/usr/local")))

     ;; Install documentation when installing Git.
     (set-install-function! git
      (lambda (software)
        (run (sudo make install install-doc install-html))))

     ;; Building PHP requires giving some additional parameters to its
     ;; configure script.
     (set-build-function! php
      (lambda (software)
        (run (sh configure --prefix=,(get-install-prefix software)
                           --with-openssl))))

     ;; Tup can build itself by running 'tup upd' after fetching the
     ;; source via Git.  The custom installation function does nothing
     ;; since I do not actually install Tup anywhere.  Instead the
     ;; directory containing the program is in the $PATH for my shell.
     (set-build-function!   tup (lambda (software) (run (tup upd))))
     (set-install-function! tup (lambda (software) #t))

     ;; I have $PATH in my shell configured to find the `rock` binary,
     ;; so there is no `install` step.
     (set-build-function! rock
      (lambda (software)
        (let ((targets (makefile-targets software)))
          (if (member "rescue" targets)
              (run (make rescue))))))
     (set-install-function! rock no-op)

     ;; Running `configure` is not part of building Tig.  The usual
     ;; --prefix parameter instead is given to Make for both building and
     ;; installing the program.
     (set-build-function! tig
      (lambda (software)
        (run (make prefix=,(get-install-prefix software)))))
     (set-install-function! tig
      (lambda (software)
        (run (sudo make install prefix=,(get-install-prefix software)))))

     (list php
           tup
           rock
           git
           tig))

   ;; This rest of this list contains software which I only ever want
   ;; to update.  That is, I never want to run `build` or `install` for
   ;; these programs.  I am only interested in keeping my copies of
   ;; their repositories up to date.

   (list (new-software-to-update-only "Awesome" "/home/eric/Documents/Programming/Awesome"))

   ;; Hypatia is slightly different in that I want to always update the
   ;; 'develop' branch instead of 'master'.
   (let ((hypatia (new-software-to-update-only "Hypatia" "/home/eric/Projects/Hypatia")))
     (set-update-function! hypatia
      (lambda (software)
        (git-update "origin" "develop")))
     (list hypatia))

   ;; The rest of the software I want to only update is in my
   ;; "/home/eric/Software" directory.
   (map (lambda (name)
          (new-software-to-update-only name
           (string-append "/home/eric/Software/" name)))
        (list "Conkeror"
              "Guile"
              "Guix"
              "MAME"
              "Pandoc"
              "Perl"
              "SQLite"))))

;;; If `id -u` returns zero that means we're running as root.
(define (running-as-root?)
  (equal? 0 (run/sexp (id -u))))

;;; This predicate fails for software that's in a bare repository but
;;; right now I don't need to update any such repositories.
(define (git-repository? software)
  (file-directory? (string-append (get-directory software) "/.git")))

;;; This function updates a Git repository by performing the following
;;; steps:
;;;
;;; 1. git fetch <remote>
;;;
;;; 2. git checkout <branch>
;;;
;;; 3. git merge --ff-only <remote>/<branch>
;;;
;;; Both arguments are optional, and default to "origin" and "master"
;;; respectively.  This function assumes that the current working
;;; directory is a Git repository, i.e. within the context of an
;;; appropriate `(with-cwd ...)` expression.
(define git-update
  (case-lambda
    (()       (git-update "origin" "master"))
    ((remote) (git-update remote   "master"))
    ((remote branch)
     (run (git fetch ,remote))
     (run (git checkout ,branch))
     (run (git merge --ff-only ,(string-append remote "/" branch))))))

;;; If the software is in a Git repository then this function will
;;; normally fetch updates from the 'origin' remote and merge them
;;; into the 'master' branch.
;;;
;;; However, if the software has the `update-function` property set
;;; then this function will call that instead of performing any of the
;;; actions described above.
(define (update software)
  (with-cwd (get-directory software)
   (or (and-let* ((update-function (get-update-function software))
                  ((procedure? update-function))
                  ((apply update-function (list software)))))
       (git-update))))

;;; Does the software have a 'configure' script?
(define (has-configure-script? software)
  (file-exists? (string-append (get-directory software) "/configure")))

;;; Does the software have a Makefile?
(define (has-makefile? software)
  (file-exists? (string-append (get-directory software) "/Makefile")))

;;; Returns a list of strings naming all of the targets of the
;;; Makefile for the given software.  This function relies on an
;;; external script, `list-makefile-targets`, which is described in
;;; the comment block at the head of this file.
(define (makefile-targets software)
  (with-cwd (get-directory software)
            (run/strings (list-makefile-targets ,(get-directory software)))))

;;; Runs the common "./configure && make" sequence that is typical for
;;; building software on Linux.  Note that this function DOES NOT run
;;; 'make install', so installation must be handled elsewhere.
;;;
;;; If the Makefile has a 'docs' target then this function runs it.
(define (configure-and-make software)
  (if (has-configure-script? software)
      (let ((prefix (get-install-prefix software)))
        (if prefix
            (run (sh configure --prefix=,prefix))
            (run (sh configure)))))
  (if (has-makefile? software)
      (begin
        (run (make))
        (let ((targets (makefile-targets software)))
          (if (member "docs" targets)
              (run (make docs)))))))

;;; Builds the software.  If the software has the property
;;; `build-function` then that will be called.  Otherwise this
;;; function attempts to build the software via `configure-and-make`.
(define (build software)
  (with-cwd (get-directory software)
   (or (and-let* ((build-function (get-build-function software))
                  ((procedure? build-function))
                  ((apply build-function (list software)))))
       (configure-and-make software))))

;;; Takes a :software record and runs the shell command
;;;
;;;     $ sudo make install
;;;
;;; inside that software's directory.  If the software has a Makefile
;;; with the "install-docs" target then this function will also run
;;; Make on that target.  This function is meant for use from within
;;; the `install` function, which will guarantee that the shell
;;; commands run in the correct directory.
(define (sudo-make-install software)
  (let ((targets (makefile-targets software)))
    (run (sudo make install))
    (if (member "install-docs" targets)
        (run (sudo make install-docs)))))

;;; Installs software.  If the software has a procedure value for the
;;; `install-function` property then it will be called.  Otherwise
;;; this function runs 'sudo make install'.
(define (install software)
  (with-cwd (get-directory software)
   (or (and-let* ((install-function (get-install-function software))
                  ((procedure? install-function))
                  ((apply install-function (list software)))))
       (sudo-make-install software))))

;; Local Variables:
;; mode: scheme
;; firestarter: "tup upd"
;; firestarter-type: failure
;; End:
